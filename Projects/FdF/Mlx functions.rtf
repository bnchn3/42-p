{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf200
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww21100\viewh13160\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 #include <mlx.h>\
\
void	*mlx_init();										connects software and display, must be done first; returns pointer for future use in other mlx functions (mlx_ptr)\
void	*mlx_new_window(void *mlx_ptr, int size_x, int size_y, char *title);		creates new window given mlx_ptr, x & y dimensions, and title of window; returns pointer for window (win_ptr)\
int	mlx_clear_window(void *mlx_ptr, void *win_ptr);				clears given window to black\
int	mlx_destroy_window(void *mlx_ptr, void *win_ptr);				closes given window\
void	*mlx_new_image(void *mlx_ptr, int width, int height);				creates new image in memory, returns pointer to image (img_ptr), can be modified any time\
char	*mlx_get_data_addr(void *img_ptr, int *bits_per_pixel, int *size_line, int *endian);	returns info about image, bits_per_pixel is # of bits needed to represent pixel color, size_line is # of bytes for one line of image in memory (needed to move one line to next), endian is whether pixel color is stored in little endian (== 0) or big endian (== 1); returns memory address where image begins\
int	mlx_put_image_to_window(void *mlx_ptr, void *win_ptr, void *img_ptr, int x, int y);	puts image in window, x and y specify where in window to put image\
unsigned int	mlx_get_color_value(void *mlx_ptr, int color);\
	takes standard RGB color parameter, returns unsigned int value\
void	*mlx_xpm_to_image(void *mlx_ptr, char **xpm_data, int *width, int *height);	creates a new image from Xpm data\
void	*mlx_xpm_file_to_image(void *mlx_ptr, char *filename, int *width, int *height);\
	same as above, uses file instead\
int	mlx_destroy_image(void *mlx_ptr, void *img_ptr);				clears image from memory\
int	mlx_pixel_put(void *mlx_ptr, void *win_ptr, int x, int y, int color);		draws defined pixel in window using x y coordinate, (0, 0) is upper left of window\
int	mlx_string_put(void *mlx_ptr, void *win_ptr, int x, int y, int color, char *string);	same as above, but puts specified string\
int	mlx_loop(void *mlx_ptr);								starts the loop of events\
int	mlx_key_hook(void *win_ptr, int (*funct_ptr)(), void *param);			calls funct_ptr when a key is pressed\
int	mlx_mouse_hook(void *win_ptr, int (*funct_ptr)(), void *param);		calls funct_ptr when a mouse button is pressed\
int	mlx_expose_hook(void *win_ptr, int (*funct_ptr)(), void *param);		calls funct_ptr when a part of the window should be re_drawn\
int	mlx_loop_hook(void *mlx_ptr, int (*funct_ptr)(), void *param);			calls funct_ptr when no event occurs\
int	expose_hook(void *param);\
int	key_hook(int keycode, void *param);\
int	mouse_hook(int button, int x, int y, void *param);\
int	loop_hook(void *param);}